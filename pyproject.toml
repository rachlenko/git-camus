[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "git-camus"
version = "0.2.0"
description = "Craft Git commit messages with existential flair using local Ollama"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Evgeny Rachlenko", email = "evgeny.rachlenko@gmail.com"}
]
maintainers = [
    {name = "Evgeny Rachlenko", email = "evgeny.rachlenko@gmail.com"}
]
keywords = ["git", "commit", "ollama", "ai", "philosophy", "camus", "existentialism"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]

[project.scripts]
git-camus = "git_camus:main"

[project.urls]
Homepage = "https://github.com/rachlenko/git-camus"
Documentation = "https://git-camus.readthedocs.io/"
Repository = "https://github.com/rachlenko/git-camus"
Changelog = "https://github.com/rachlenko/git-camus/blob/main/CHANGELOG.md"
Issues = "https://github.com/rachlenko/git-camus/issues"
Discussions = "https://github.com/rachlenko/git-camus/discussions"

[tool.setuptools]
packages = []
py-modules = ["git_camus"]

[tool.setuptools.package-data]
git_camus = ["py.typed"]

[tool.black]
line-length = 99
target-version = ["py39", "py310", "py311", "py312", "py313"]
skip-magic-trailing-comma = true

[tool.ruff]
line-length = 99
target-version = "py39"
fix = true
select = [
    "E",       # pycodestyle (error)
    "F",       # pyflakes
    "W",       # pycodestyle (warning)
    "B",       # flake8-bugbear
    "I",       # isort
    "N",       # pep8-naming
    "PIE",     # flake8-pie
    "PLE",     # pylint error
    "RUF100",  # Unused noqa comments
    "PGH004",  # blanket noqa comments
    "UP",      # pyupgrade
    "C4",      # flake8-comprehensions
    "SIM201", "SIM202", "SIM222", "SIM223",  # flake8-simplify
    "ISC001",  # implicitly concatenated string
    "RET501", "RET502",  # better return None handling
]
ignore = [
    "B007",  # Loop control variable not used within the loop body.
    "B011",  # Don't use assert False
    "B023",  # Function definition does not bind loop variable
    "E2",    # conflicts with black
    "E402",  # module level import not at top of file
    "E501",  # conflicts with black
    "E721",  # Use `is` and `is not` for type comparisons
    "E731",  # Do not assign a `lambda` expression, use a `def`
    "E741",  # Ambiguous variable name
    "N818",  # Exception should be named with an Error suffix
    "N806",  # UPPER_CASE used for constant local variables
    "UP031", # Use format specifiers instead of percent format
    "UP032", # 'f-string always preferable to format' is controversial
    "C409",  # https://github.com/astral-sh/ruff/issues/12912
    "C420",  # reads a little worse. fromkeys predates dict comprehensions
    "C416",  # There are a few cases where it's nice to have names for the dict items
    "PIE790", # there's nothing wrong with pass
]

[tool.ruff.lint.isort]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0.0"
testpaths = ["tests"]
python_files = 'test*.py'
python_classes = 'Test*'
python_functions = 'test_*'
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=git_camus",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]

[tool.coverage.run]
branch = true
source = ["git_camus"]
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
omit = ['tests/*', 'setup.py']
exclude_lines = [
    '\#\s*pragma: no cover',
    '^\s*raise AssertionError\b',
    '^\s*raise NotImplementedError\b',
    '^\s*return NotImplemented\b',
    '^\s*raise$',
    '^assert False\b',
    '''^if __name__ == ['"]__main__['"]:$''',
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"