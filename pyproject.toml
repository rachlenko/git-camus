 [build-system]
  requires = ["setuptools>=61.0", "wheel"]
  build-backend = "setuptools.build_meta"

  [project]
  name = "git-camus"
  version = "0.2.0"
  description = "Craft Git commit messages with existential flair using local Ollama"
  readme = "README.md"
  license = {text = "MIT"}
  authors = [
      {name = "Evgeny Rachlenko", email = "evgeny.rachlenko@gmail.com"}
  ]
  maintainers = [
      {name = "Evgeny Rachlenko", email = "evgeny.rachlenko@gmail.com"}
  ]
  keywords = ["git", "commit", "ollama", "ai", "philosophy", "camus", "existentialism"]
  classifiers = [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.13",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Version Control :: Git",
      "Topic :: Text Processing :: Linguistic",
  ]
  requires-python = ">=3.9"
  dependencies = [
      "annotated-types==0.7.0",
      "anyio==4.8.0",
      "black==25.1.0",
      "build==1.2.2.post1",
      "CacheControl==0.14.3",
      "certifi==2024.12.14",
      "cffi==1.17.1",
      "charset-normalizer==3.4.3",
      "cleo==2.1.0",
      "click==8.1.8",
      "coverage==7.10.1",
      "crashtest==0.4.1",
      "cryptography==45.0.7",
      "distlib==0.4.0",
      "dulwich==0.22.8",
      "execnet==2.1.1",
      "fastapi==0.116.1",
      "fastjsonschema==2.21.2",
      "filelock==3.19.1",
      "findpython==0.6.3",
      "h11==0.16.0",
      "htmlx==0.0.3",
      "httpcore==1.0.9",
      "httpx==0.28.1",
      "idna==3.10",
      "iniconfig==2.1.0",
      "installer==0.7.0",
      "jaraco.classes==3.4.0",
      "jaraco.context==6.0.1",
      "jaraco.functools==4.3.0",
      "jeepney==0.9.0",
      "keyring==25.6.0",
      "markdown-it-py==3.0.0",
      "mdurl==0.1.2",
      "more-itertools==10.8.0",
      "msgpack==1.1.1",
      "mypy==1.17.0",
      "mypy_extensions==1.1.0",
      "packaging==25.0",
      "pathspec==0.12.1",
      "pbs-installer==2025.9.2",
      "pkginfo==1.12.1.2",
      "platformdirs==4.3.8",
      "pluggy==1.6.0",
      "poetry==2.1.4",
      "poetry-core==2.1.3",
      "pycparser==2.22",
      "pydantic==2.11.7",
      "pydantic_core==2.33.2",
      "Pygments==2.19.2",
      "pyproject_hooks==1.2.0",
      "pytest==8.4.1",
      "pytest-cov==6.2.1",
      "pytest-xdist==3.8.0",
      "PyYAML==6.0.2",
      "RapidFuzz==3.14.0",
      "requests==2.32.5",
      "requests-toolbelt==1.0.0",
      "rich==13.9.4",
      "ruff==0.12.5",
      "SecretStorage==3.3.3",
      "setuptools==80.9.0",
      "shellingham==1.5.4",
      "sniffio==1.3.1",
      "starlette==0.47.3",
      "tomlkit==0.13.3",
      "trove-classifiers==2025.8.26.11",
      "typing-inspection==0.4.1",
      "typing_extensions==4.14.1",
      "urllib3==1.26.20",
      "uv==0.8.15",
      "virtualenv==20.32.0",
      "zstandard==0.24.0",
  ]

  [project.optional-dependencies]
  dev = [
      "pytest>=7.0.0",
      "pytest-cov>=4.0.0",
      "pytest-xdist>=3.0.0",
      "black>=23.0.0",
      "ruff>=0.1.0",
      "mypy>=1.0.0",
      "pre-commit>=3.0.0",
  ]
  docs = [
      "sphinx>=7.0.0",
      "sphinx-rtd-theme>=1.0.0",
      "myst-parser>=1.0.0",
  ]
  test = [
      "pytest>=7.0.0",
      "pytest-cov>=4.0.0",
      "pytest-xdist>=3.0.0",
  ]

  [project.scripts]
  git-camus = "git_camus:main"

  [project.urls]
  Homepage = "https://github.com/rachlenko/git-camus"
  Documentation = "https://git-camus.readthedocs.io/"
  Repository = "https://github.com/rachlenko/git-camus"
  Changelog = "https://github.com/rachlenko/git-camus/blob/main/CHANGELOG.md"
  Issues = "https://github.com/rachlenko/git-camus/issues"
  Discussions = "https://github.com/rachlenko/git-camus/discussions"

  [tool.setuptools]
  packages = []
  py-modules = ["git_camus"]

  [tool.setuptools.package-data]
  git_camus = ["py.typed"]

  [tool.uv]
  dev-dependencies = [
      "pytest>=7.0.0",
      "pytest-cov>=4.0.0",
      "pytest-xdist>=3.0.0",
      "black>=23.0.0",
      "ruff>=0.1.0",
      "mypy>=1.0.0",
      "pre-commit>=3.0.0",
  ]

  [tool.black]
  line-length = 99
  target-version = ["py39", "py310", "py311", "py312", "py313"]
  skip-magic-trailing-comma = true

  [tool.ruff]
  line-length = 99
  target-version = "py39"
  fix = true

  [tool.ruff.lint]
  select = [
      "E", "F", "W", "B", "I", "N", "PIE", "PLE", "RUF100", "PGH004",
      "UP", "C4", "SIM201", "SIM202", "SIM222", "SIM223", "ISC001",
      "RET501", "RET502",
  ]
  ignore = [
      "B007", "B011", "B023", "E2", "E402", "E501", "E721", "E731",
      "E741", "N818", "N806", "UP031", "UP032", "C409", "C420",
      "C416", "PIE790",
  ]

  [tool.ruff.lint.isort]
  combine-as-imports = true
  extra-standard-library = ["typing_extensions"]

  [tool.mypy]
  python_version = "3.9"
  warn_return_any = true
  warn_unused_configs = true
  disallow_untyped_defs = true
  disallow_incomplete_defs = true
  check_untyped_defs = true
  disallow_untyped_decorators = true
  no_implicit_optional = true
  warn_redundant_casts = true
  warn_unused_ignores = true
  warn_no_return = true
  warn_unreachable = true
  strict_equality = true

  [tool.pytest.ini_options]
  minversion = "7.0.0"
  testpaths = ["tests"]
  python_files = 'test*.py'
  python_classes = 'Test*'
  python_functions = 'test_*'
  addopts = [
      "--strict-markers",
      "--strict-config",
      "--cov=git_camus",
      "--cov-report=term-missing",
      "--cov-report=html",
      "--cov-report=xml",
      "--cov-fail-under=90",
  ]

  [tool.coverage.run]
  branch = true
  source = ["git_camus"]
  parallel = true

  [tool.coverage.report]
  show_missing = true
  skip_covered = true
  omit = ['tests/*', 'setup.py']
  exclude_lines = [
      '\#\s*pragma: no cover',
      '^\s*raise AssertionError\b',
      '^\s*raise NotImplementedError\b',
      '^\s*return NotImplemented\b',
      '^\s*raise',
      '^assert False\b',
      '''^if __name__ == ['"]__main__['"]:''',
  ]

  [tool.coverage.html]
  directory = "htmlcov"

 [tool.coverage.xml]
  output = "coverage.xml"
